nextflow_process {

    name "Test Process DESEQ2_SALMON"
    script "../main.nf"
    process "DESEQ2_SALMON"
    config "./test.config"

    tag "modules"
    tag "modules_nfcore"
    tag "deseq2"
    tag "salmon"

    setup {
        run("SALMON_QUANT") {
            script "../../../nf-core/salmon/quant/main.nf"
            process {
                """
                input[0] = Channel.fromFilePairs('/workspaces/eduomics/testdata/raw_reads/sample_*_{1,2}.fasta.gz', checkIfExists: true)
                    .map { sample_id, files ->
                        def meta = [id: 'simtest', sample: sample_id, genes: 'A, B, C', reps: 3, groups: 2]
                        [meta, files]
                    }
                input[1] = Channel.value(file('/workspaces/eduomics/testdata/chr22_transcripts_index', checkIfExists: true))
                input[2] = Channel.value(file('/workspaces/eduomics/testdata/chr22.gff3', checkIfExists: true))
                input[3] = Channel.value(file('/workspaces/eduomics/testdata/gencode_transcripts_noversion_chr22.fasta', checkIfExists: true))
                input[4] = false
                input[5] = Channel.value("IU")
                """
            }
        }
    }

    test("deseq2_salmon - run") {

        when {
            process {
                """
                input[0] = SALMON_QUANT.out.results.map{ m, folder ->
                              def newmap = [id: m.id, genes: m.genes, reps:m.reps, groups: m.groups]
                              [newmap, folder]
                           }
                           .groupTuple(by: 0)
                input[1] = file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/rnaseq/countmatrices/gff3_chr22.rds", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    def outputDir = new File(process.out.results.get(0)[1].toString())
                    def requiredFiles = [
                        'count_plot.pdf',
                        'deseq2_results.tsv',
                        'dispersion_plot.pdf',
                        'heatmap_plot.pdf',
                        'ma_plot.pdf',
                        'pca_plot.pdf'
                    ]
                    requiredFiles.each { fileName ->
                        assert new File(outputDir, fileName).exists()
                    }
                },
                { assert process.out.versions }
            )
        }
    }

    test("deseq2_salmon - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = SALMON_QUANT.out.results.map{ m, folder ->
                              def newmap = [id: m.id, genes: m.genes, reps:m.reps, groups: m.groups]
                              [newmap, folder]
                           }
                           .groupTuple(by: 0)
                input[1] = file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/rnaseq/countmatrices/gff3_chr22.rds", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                {
                    def outputDir = new File(process.out.results.get(0)[1].toString())
                    def requiredFiles = [
                        'count_plot.pdf',
                        'deseq2_results.tsv',
                        'dispersion_plot.pdf',
                        'heatmap_plot.pdf',
                        'ma_plot.pdf',
                        'pca_plot.pdf'
                    ]
                    requiredFiles.each { fileName ->
                        assert new File(outputDir, fileName).exists()
                    }
                },
                { assert process.out.versions }
            )
        }
    }
}
