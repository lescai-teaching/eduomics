nextflow_process {

    name "Test Process DNAVALIDATION"
    script "../main.nf"
    process "DNAVALIDATION"

    tag "modules"
    tag "modules_nf_core"
    tag "dnavalidation"

    test("Should validate DNA when variant is found") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test1', simulatedvar:'chr22-18078510-T-C' ],
                    file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/genotypeGVCFs/sim01.vcf.gz"),
                    [
                        file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/test1_case_1.fastq.gz"),
                        file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/test1_case_2.fastq.gz"),
                        file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/test1_control_1.fastq.gz"),
                        file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/test1_control_2.fastq.gz")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success
            def dir = new File(process.out.dna_validated_results[0][1])
            def files = dir.listFiles() as List
            assert files.count { it.name.endsWith('.vcf') } == 1
            assert files.count { it.name.endsWith('.txt') } == 1
            assert files.count { it.name.endsWith('.fastq.gz') } == 4
            assert files.size() == 6  // 1 solution file, 1 VCF, 4 FASTQ.GZ
            assert process.out.versions
        }
    }

    test("Should not validate DNA when variant is not found") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test2', simulatedvar:'LOLLOLOLLO' ],
                    file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/genotypeGVCFs/sim01.vcf.gz"),
                    [
                        file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/test1_case_1.fastq.gz"),
                        file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/test1_case_2.fastq.gz"),
                        file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/test1_control_1.fastq.gz"),
                        file("https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/test1_control_2.fastq.gz")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.dna_validated_results.isEmpty()
            assert process.out.versions
        }
    }

    test("Stub should work correctly") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test_stub', simulatedvar:'chr22-1234-A-T' ],
                    file("dummy.vcf"),
                    [
                        file("dummy_case_1.fastq.gz"),
                        file("dummy_case_2.fastq.gz"),
                        file("dummy_control_1.fastq.gz"),
                        file("dummy_control_2.fastq.gz")
                    ]
                ]
                """
            }
        }

        then {
            assert process.success
            def dir = new File(process.out.dna_validated_results[0][1])
            def files = dir.listFiles() as List
            assert files.count { it.name.endsWith('.vcf') } == 1
            assert files.count { it.name.endsWith('.txt') } == 1
            assert files.count { it.name.endsWith('.fastq.gz') } == 4
            assert files.size() == 6  // 1 solution file, 1 VCF, 4 FASTQ.GZ
            assert process.out.versions
        }
    }
}
