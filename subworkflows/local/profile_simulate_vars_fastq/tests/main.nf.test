nextflow_workflow {

    name "Test Subworkflow PROFILE_SIMULATE_VARS_FASTQ"
    script "../main.nf"
    config "./simulate_reads.config"
    workflow "PROFILE_SIMULATE_VARS_FASTQ"

    tag "subworkflows"
    tag "subworkflows_"
    tag "subworkflows/profile_simulate_vars_fastq"
    tag "pyconvertosim"
    tag "simuscop/simureads"

    test("Simulate reads - profile - two pathological variants") {

        when {
            workflow {
                """
                // channel: [mandatory] [[meta], vcf_benign]
                input[0] = Channel.of([
                    [ id:'sim01', coverage:50, type: 'dnaseq', reps:1, groups:2], // meta map
                    file('https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/clinvar_data/clinvar_20250317_chr22q11-21_benign.vcf', checkIfExists: true),
                ])
                // channel: [mandatory] [[meta], vcf_patho]
                input[1] = Channel.of([
                    [ id:'sim01', coverage:50, type: 'dnaseq', reps:1, groups:2], // meta map
                    file('https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/clinvar_data/clinvar_2vars-only_patho.vcf', checkIfExists: true),
                ])
                // channel: [mandatory] [[meta], profile]
                input[2] = Channel.value([
                    [ id:'sim01', coverage:50, type: 'dnaseq', reps:1, groups:2], // meta map
                    file('https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/simureads/chr22_whole_test.profile', checkIfExists: true),
                ])
                // channel: [mandatory] [fasta, fai]
                input[3] = Channel.value([
                    file('https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/chr22_q11-21_GRCh38.fasta', checkIfExists: true),
                    file('https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/chr22_q11-21_GRCh38.fasta.fai', checkIfExists: true),
                ])
                // channel: [mandatory] [capture_500pad]
                input[4] = Channel.value([
                    file('https://raw.githubusercontent.com/lescai-teaching/eduomics_testdata/refs/heads/main/dna/Twist_Exome_Target2_chr22q11-21_GRCh38_500pad.bed', checkIfExists: true),
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert workflow.out.simreads.get(0).get(1).first().endsWith('.fq.gz') }
            )
        }
    }
}
